from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from aiogram.dispatcher import FSMContext
from aiogram import types
from main import add_log, add_test  # , add_test_good_work, add_test_good_relationships, add_test_sociophobia
import keybord as kb
from states import profile, class_good_work, class_good_relationships, class_sociophobia


async def f_menu_main(message: types.Message, bot, main_menu, session: AsyncSession):
    if message.text == "‚≠ê–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ":
        await bot.send_video(message.from_user.id,
                             "BAACAgIAAxkBAAIBeWSEV0yLQ9qbS3lhLeggibwlfF9sAAJeLQACM_EhSO4gnK00zbBbLwQ",
                             protect_content=True)
        await message.answer(f"–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç", reply_markup=kb.menu_change_test)
    elif message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await about_project(message, bot, main_menu, session)
    elif message.text == "–î–æ–Ω–∞—Ç \n –ø–æ–º–æ—â—å –ø—Ä–æ–µ–∫—Ç—Éüôè":
        await donat(message, bot, main_menu, session)


async def about_project(message: types.Message, bot, main_menu, session: AsyncSession):
    await message.answer(f"–û –ø—Ä–æ–µ–∫—Ç–µ: \n" +
                         f" –°–æ–∑–¥–∞—Ç–µ–ª—å –ú–∏—Ö–∞–∏–ª - –º–µ–≥–∞ –∫—Ä—É—Ç–æ–π –ø–∞—Ä–µ–Ω—å \n" +
                         f" –Ω–∞–ø–∏—à–∏ –µ–º—É –≤ –ª–∏—á–∫—É: @Mike_shumatov"
                         , reply_markup=main_menu)
    await add_log(session, message)


async def donat(message: types.Message, bot, main_menu, session: AsyncSession):
    await message.answer(f"–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç: \n" +
                         f"–ü–µ—Ä–µ–≤–µ–¥–∏ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ —Å–±–µ—Ä –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "
                         , reply_markup=main_menu)
    await message.answer(f"89272360355")
    await add_log(session, message)


# –≤—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–ø—Ä–æ—Å–∞–º–∏
# await bot.send_video(message.from_user.id, BAACAgIAAxkBAAIBeWSEV0yLQ9qbS3lhLeggibwlfF9sAAJeLQACM_EhSO4gnK00zbBbLwQ, protect_content=True)

async def f_start_test_sash(message: types.Message, bot, main_menu, session: AsyncSession):
    # print(message.message.text)
    await add_log(session, message)
    menu_test_step_1 = kb.menu.menu_stap1(0)
    await bot.send_message(message.from_user.id, f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è —Å–º–µ—Ä—Ç—å - —ç—Ç–æ:",
                           reply_markup=menu_test_step_1)
    await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                                                 f"\n –ê: –û–±—Ä–∞—Ç–∏–º—ã–π —ç—Ç–∞–ø —É–º–∏—Ä–∞–Ω–∏—è"
                                                 f"\n –ë: –ù–µ–æ–±—Ä–∞—Ç–∏–º—ã–π —ç—Ç–∞–ø —É–º–∏—Ä–∞–Ω–∏—è",
                           reply_markup=menu_test_step_1)
    await profile.s_states1.set()


async def profile_s_states1(message: types.Message, session: AsyncSession, bot, state: FSMContext, main_menu):
    await add_log(session, message)
    answer = message.text
    if answer == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
        await bot.send_message(message.from_user.id, f"–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏—Å—å \n",
                               reply_markup=main_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}")
        await state.update_data(s_states1=answer)
        if answer == "–ë":  # or "–ë": or "–í": - or –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É—é elif
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_step_1 = kb.menu.menu_stap1(0)
            await bot.send_message(message.from_user.id, f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è —Å–º–µ—Ä—Ç—å - —ç—Ç–æ:",
                                       reply_markup=menu_test_step_1)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                                                             f"\n –ê: –û–±—Ä–∞—Ç–∏–º—ã–π —ç—Ç–∞–ø —É–º–∏—Ä–∞–Ω–∏—è"
                                                             f"\n –ë: –ù–µ–æ–±—Ä–∞—Ç–∏–º—ã–π —ç—Ç–∞–ø —É–º–∏—Ä–∞–Ω–∏—è",
                                       reply_markup=menu_test_step_1)
            await profile.s_states1.set()

        else:

            menu_test_step_2 = kb.menu.menu_stap2(0)
            await bot.send_message(message.from_user.id,
                                       f"–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ –≤–¥–æ—Ö–æ–≤ –∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏–π –¥–µ–ª–∞—é—Ç –ø—Ä–∏ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏?\n",
                                       reply_markup=menu_test_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                                                             f"\n –ê: 30 —Ö 2"
                                                             f"\n –ë: 20 —Ö 2",
                                       reply_markup=menu_test_step_2)
            await profile.s_states2.set()


async def profile_s_states2(message: types.Message, session: AsyncSession, bot, state: FSMContext, main_menu):
    await add_log(session, message)
    answer = message.text
    if answer == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
        await bot.send_message(message.from_user.id, f"–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏—Å—å \n",
                               reply_markup=main_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}")
        await state.update_data(s_states2=answer)
        if answer == "–ë":  # or "–ë": or "–í": - or –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É—é elif
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_step_2 = kb.menu.menu_stap2(0)
            await bot.send_message(message.from_user.id,
                                       f"–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ –≤–¥–æ—Ö–æ–≤ –∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏–π –¥–µ–ª–∞—é—Ç –ø—Ä–∏ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏?\n",
                                       reply_markup=menu_test_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                                                             f"\n –ê: 30 —Ö 2"
                                                             f"\n –ë: 20 —Ö 2",
                                       reply_markup=menu_test_step_2)
            await profile.s_states2.set()


        else:

            await bot.send_message(message.from_user.id, f'–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω \n –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ.'
                                       , reply_markup=kb.keyboard)

            await bot.send_video(message.from_user.id,
                                     "BAACAgIAAxkBAAICBWSGN1wBotEHIGhwVg4eL4RHMEGQAAL9NAAC4qUxSGYEBRfTIiTWLwQ",
                                     protect_content=True)
            await message.answer(f"–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç", reply_markup=kb.menu_change_test_obmorok)
            await state.update_data(s_states3=None)
            await state.update_data(s_states4=None)
            await state.update_data(s_states5=None)
            await state.update_data(s_states6=None)

            await state.update_data(s_states7=None)
            await state.update_data(s_states8=None)
            await state.update_data(s_states9=None)
            await state.update_data(s_states10=None)

            data = await state.get_data()
            print(f"data: {data}")
            await add_test(session, message, 1, 'asthenia', data['s_states1'],
                           data['s_states2'],
                           data['s_states3'],
                           data['s_states4'],
                           data['s_states5'],
                           data['s_states6'],
                           data['s_states7'],
                           data['s_states8'],
                           data['s_states9'],
                           data['s_states10'])
            await state.finish()


# –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç - –Ω–∞ –æ–±–º–æ—Ä–æ–∫

async def f_start_test_good_work(message: types.Message, bot, main_menu, session: AsyncSession):
    # print(message.message.text)
    await add_log(session, message)
    menu_test_good_work_step_1 = kb.menu.menu_good_work_stap1(0)
    await bot.send_message(message.from_user.id, f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –æ–±–º–æ—Ä–æ–∫ - —ç—Ç–æ:",
                           reply_markup=menu_test_good_work_step_1)
    await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                 f"\n –ê: –ü–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç"
                                                 f"\n –ë: –ü–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç",
                           reply_markup=menu_test_good_work_step_1)
    await class_good_work.s_good_work_states1.set()


async def f_good_work_states1(message: types.Message, session: AsyncSession, bot, state: FSMContext, main_menu):
    await add_log(session, message)
    answer = message.text
    if answer == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
        await bot.send_message(message.from_user.id, f"–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏—Å—å \n",
                               reply_markup=main_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}")
        await state.update_data(s_good_work_states1=answer)
        if answer == "–ë":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_work_step_1 = kb.menu.menu_good_work_stap1(0)
            await bot.send_message(message.from_user.id, f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –æ–±–º–æ—Ä–æ–∫ - —ç—Ç–æ:",
                                       reply_markup=menu_test_good_work_step_1)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                             f"\n –ê: –ü–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç"
                                                             f"\n –ë: –ü–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç",
                                       reply_markup=menu_test_good_work_step_1)
            await class_good_work.s_good_work_states1.set()
        else:
            menu_test_good_work_step_2 = kb.menu.menu_good_work_stap2(0)
            await bot.send_message(message.from_user.id,
                                       f"–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å: –∫–∞–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–¥–∞—Ç—å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–º—É  –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥—ã—Ö–∞–Ω–∏—è? \n"
                                       , reply_markup=menu_test_good_work_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: \n –ê: –ü–æ–ª—É–ª–µ–∂–∞"
                                                             f"\n –ë: –ü–æ–ª—É—Å–∏–¥—è"
                                                             f"\n –í: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ, –Ω–æ–≥–∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –≥–æ–ª–æ–≤—ã",
                                       reply_markup=menu_test_good_work_step_2)
            await class_good_work.s_good_work_states2.set()


async def f_good_work_states2(message: types.Message, session: AsyncSession, bot, state: FSMContext, main_menu):
    await add_log(session, message)
    answer = message.text
    if answer == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
        await bot.send_message(message.from_user.id, f"–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏—Å—å \n",
                               reply_markup=main_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}")
        await state.update_data(s_good_work_states2=answer)
        if answer == "–ê":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_work_step_2 = kb.menu.menu_good_work_stap2(0)
            await bot.send_message(message.from_user.id,
                                       f"–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å: –∫–∞–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–¥–∞—Ç—å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–º—É  –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥—ã—Ö–∞–Ω–∏—è? \n"
                                       , reply_markup=menu_test_good_work_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: \n –ê: –ü–æ–ª—É–ª–µ–∂–∞"
                                                             f"\n –ë: –ü–æ–ª—É—Å–∏–¥—è"
                                                             f"\n –í: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ, –Ω–æ–≥–∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –≥–æ–ª–æ–≤—ã",
                                       reply_markup=menu_test_good_work_step_2)
            await class_good_work.s_good_work_states2.set()

        elif answer == "–ë":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_work_step_2 = kb.menu.menu_good_work_stap2(0)
            await bot.send_message(message.from_user.id,
                                       f"–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å: –∫–∞–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–¥–∞—Ç—å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–º—É  –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥—ã—Ö–∞–Ω–∏—è? \n"
                                       , reply_markup=menu_test_good_work_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: \n –ê: –ü–æ–ª—É–ª–µ–∂–∞"
                                                             f"\n –ë: –ü–æ–ª—É—Å–∏–¥—è"
                                                             f"\n –í: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ, –Ω–æ–≥–∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –≥–æ–ª–æ–≤—ã",
                                       reply_markup=menu_test_good_work_step_2)
            await class_good_work.s_good_work_states2.set()

        else:

                # await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}", reply_markup=main_menu)
            await state.update_data(s_good_work_states2=answer)
            await bot.send_message(message.from_user.id, f'–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω \n –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ.'
                                       , reply_markup=kb.keyboard)
            await bot.send_video(message.from_user.id,
                                     "BAACAgIAAxkBAAICB2SGOt7Aa7OZVkSphEXTVCLdKtXCAAIINQAC4qUxSN1RrUTF5eAtLwQ",
                                     protect_content=True)
            await message.answer(f"–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç", reply_markup=kb.menu_change_test_utop)

            await state.update_data(s_good_work_states3=None)
            await state.update_data(s_good_work_states4=None)
            await state.update_data(s_good_work_states5=None)
            await state.update_data(s_good_work_states6=None)
            await state.update_data(s_good_work_states7=None)

            await state.update_data(s_good_work_states8=None)
            await state.update_data(s_good_work_states9=None)
            await state.update_data(s_good_work_states10=None)

            data = await state.get_data()
            print(f"data: {data}")
            await add_test(session, message, 2, 'good_work', data['s_good_work_states1'],
                           data['s_good_work_states2'],
                           data['s_good_work_states3'],
                           data['s_good_work_states4'],
                           data['s_good_work_states5'],
                           data['s_good_work_states6'],
                           data['s_good_work_states7'],
                           data['s_good_work_states8'],
                           data['s_good_work_states9'],
                           data['s_good_work_states10'])
            await state.finish()


# —Ç—Ä–µ—Ç–∏–π —Ç–µ—Å—Ç - –Ω–∞ —É—Ç–æ–ø–ª–µ–Ω–∏–µ

async def f_start_test_good_relationships(message: types.Message, bot, main_menu, session: AsyncSession):
    # print(message.message.text)
    await add_log(session, message)
    menu_test_good_relationships_step_1 = kb.menu.menu_good_relationships_stap1(0)
    await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 1: —É—Ç–æ–ø–ª–µ–Ω–∏–µ –±—ã–≤–∞–µ—Ç:",
                           reply_markup=menu_test_good_relationships_step_1)
    await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                 f"\n –ê: –ò—Å—Ç–∏–Ω–Ω–æ–µ"
                                                 f"\n –ë: –õ–æ–∂–Ω–æ–µ"
                                                 f"\n –í: –ò—Å—Ç–∏–Ω–Ω–æ–µ –∏ –ª–æ–∂–Ω–æ–µ"
                           ,
                           reply_markup=menu_test_good_relationships_step_1)
    await class_good_relationships.s_good_relationships_states1.set()


async def f_good_relationships_states1(message: types.Message, session: AsyncSession, bot, state: FSMContext,
                                       main_menu):
    await add_log(session, message)
    answer = message.text
    if answer == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
        await bot.send_message(message.from_user.id, f"–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏—Å—å \n",
                               reply_markup=main_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}")
        await state.update_data(s_good_relationships_states1=answer)
        if answer == "–ê":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_relationships_step_1 = kb.menu.menu_good_relationships_stap1(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 1: —É—Ç–æ–ø–ª–µ–Ω–∏–µ –±—ã–≤–∞–µ—Ç:",
                                       reply_markup=menu_test_good_relationships_step_1)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                             f"\n –ê: –ò—Å—Ç–∏–Ω–Ω–æ–µ"
                                                             f"\n –ë: –õ–æ–∂–Ω–æ–µ"
                                                             f"\n –í: –ò—Å—Ç–∏–Ω–Ω–æ–µ –∏ –ª–æ–∂–Ω–æ–µ"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_1)
            await class_good_relationships.s_good_relationships_states1.set()
        elif answer == "–ë":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_relationships_step_1 = kb.menu.menu_good_relationships_stap1(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 1: —É—Ç–æ–ø–ª–µ–Ω–∏–µ –±—ã–≤–∞–µ—Ç:",
                                       reply_markup=menu_test_good_relationships_step_1)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                             f"\n –ê: –ò—Å—Ç–∏–Ω–Ω–æ–µ"
                                                             f"\n –ë: –õ–æ–∂–Ω–æ–µ"
                                                             f"\n –í: –ò—Å—Ç–∏–Ω–Ω–æ–µ –∏ –ª–æ–∂–Ω–æ–µ"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_1)
            await class_good_relationships.s_good_relationships_states1.set()
        else:
            menu_test_good_relationships_step_2 = kb.menu.menu_good_relationships_stap2(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 2: –ü–æ–¥–ø–ª—ã–≤–∞—Ç—å –∫ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–º—É –Ω—É–∂–Ω–æ: \n",
                                       reply_markup=menu_test_good_relationships_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                             f"\n –ê: –°–æ —Å–ø–∏–Ω—ã"
                                                             f"\n –ë: –°–ø–µ—Ä–µ–¥–∏"
                                                             f"\n –í: –°–æ —Å–ø–∏–Ω—ã –∏ —Å–±–æ–∫—É"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_2)
            await class_good_relationships.s_good_relationships_states2.set()


async def f_good_relationships_states2(message: types.Message, session: AsyncSession, bot, state: FSMContext,
                                       main_menu):
    await add_log(session, message)
    answer = message.text
    if answer == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
        await bot.send_message(message.from_user.id, f"–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏—Å—å \n",
                               reply_markup=main_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}")
        await state.update_data(s_good_relationships_states2=answer)
        if answer == "–ê":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_relationships_step_2 = kb.menu.menu_good_relationships_stap2(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 2: –ü–æ–¥–ø–ª—ã–≤–∞—Ç—å –∫ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–º—É –Ω—É–∂–Ω–æ: \n",
                                       reply_markup=menu_test_good_relationships_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                             f"\n –ê: –°–æ —Å–ø–∏–Ω—ã"
                                                             f"\n –ë: –°–ø–µ—Ä–µ–¥–∏"
                                                             f"\n –í: –°–æ —Å–ø–∏–Ω—ã –∏ —Å–±–æ–∫—É"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_2)
            await class_good_relationships.s_good_relationships_states2.set()
        elif answer == "–ë":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_relationships_step_2 = kb.menu.menu_good_relationships_stap2(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 2: –ü–æ–¥–ø–ª—ã–≤–∞—Ç—å –∫ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–º—É –Ω—É–∂–Ω–æ: \n",
                                       reply_markup=menu_test_good_relationships_step_2)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: "
                                                             f"\n –ê: –°–æ —Å–ø–∏–Ω—ã"
                                                             f"\n –ë: –°–ø–µ—Ä–µ–¥–∏"
                                                             f"\n –í: –°–æ —Å–ø–∏–Ω—ã –∏ —Å–±–æ–∫—É"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_2)
            await class_good_relationships.s_good_relationships_states2.set()
        else:

            menu_test_good_relationships_step_3 = kb.menu.menu_good_relationships_stap3(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 3: –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ –Ω—É–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å: \n",
                                       reply_markup=menu_test_good_relationships_step_3)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                                                             f"\n –ê: –ù–∞ —Å–ø–∏–Ω—É"
                                                             f"\n –ë: –ù–∞ –±–æ–∫"
                                                             f"\n –í: –ü–æ–ª—É–ª–µ–∂–∞"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_3)
            await class_good_relationships.s_good_relationships_states3.set()


async def f_good_relationships_states3(message: types.Message, session: AsyncSession, bot, state: FSMContext,
                                       main_menu):
    await add_log(session, message)
    answer = message.text
    if answer == "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
        await bot.send_message(message.from_user.id, f"–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏—Å—å \n",
                               reply_markup=main_menu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}")
        await state.update_data(s_good_relationships_states3=answer)
        if answer == "–ë":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_relationships_step_3 = kb.menu.menu_good_relationships_stap3(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 3: –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ –Ω—É–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å: \n",
                                       reply_markup=menu_test_good_relationships_step_3)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                                                             f"\n –ê: –ù–∞ —Å–ø–∏–Ω—É"
                                                             f"\n –ë: –ù–∞ –±–æ–∫"
                                                             f"\n –í: –ü–æ–ª—É–ª–µ–∂–∞"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_3)
            await class_good_relationships.s_good_relationships_states3.set()
        elif answer == "–í":
            await bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            menu_test_good_relationships_step_3 = kb.menu.menu_good_relationships_stap3(0)
            await bot.send_message(message.from_user.id, f"–í–æ–ø—Ä–æ—Å 3: –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ –Ω—É–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å: \n",
                                       reply_markup=menu_test_good_relationships_step_3)
            await bot.send_message(message.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
                                                             f"\n –ê: –ù–∞ —Å–ø–∏–Ω—É"
                                                             f"\n –ë: –ù–∞ –±–æ–∫"
                                                             f"\n –í: –ü–æ–ª—É–ª–µ–∂–∞"
                                       ,
                                       reply_markup=menu_test_good_relationships_step_3)
            await class_good_relationships.s_good_relationships_states3.set()

        else:
                # await bot.send_message(message.from_user.id, f"–í–∞—à –æ—Ç–≤–µ—Ç - {answer}", reply_markup=main_menu)
            await state.update_data(s_good_relationships_states3=answer)
            await bot.send_message(message.from_user.id, f'–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω \n –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ —Ç—Ä–∏ —Ç–µ—Å—Ç–∞!:'
                                       #,reply_markup=kb.keyboard)
                                       ,reply_markup=main_menu)
            await state.update_data(s_good_relationships_states4=None)
            await state.update_data(s_good_relationships_states5=None)
            await state.update_data(s_good_relationships_states6=None)
            await state.update_data(s_good_relationships_states7=None)
            await state.update_data(s_good_relationships_states8=None)
            await state.update_data(s_good_relationships_states9=None)
            await state.update_data(s_good_relationships_states10=None)

            data = await state.get_data()
            print(f"data: {data}")
            await add_test(session, message, 3, 'good_relationships', data['s_good_relationships_states1'],
                               data['s_good_relationships_states2'],
                               data['s_good_relationships_states3'],
                               data['s_good_relationships_states4'],
                               data['s_good_relationships_states5'],
                               data['s_good_relationships_states6'],
                               data['s_good_relationships_states7'],
                               data['s_good_relationships_states8'],
                               data['s_good_relationships_states9'],
                               data['s_good_relationships_states10'])
            await state.finish()
